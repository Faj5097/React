{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","CommentItem","item","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedHandler","useEffect","submitFormHandler","event","preventDefault","commentText","current","value","console","log","quoteId","commentData","LoadingSpinner","form","onSubmit","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,MAAQ,kC,mBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,wFCUrIC,EATU,SAACC,GACxB,OACE,yBAAQC,UAAWC,IAAQC,MAA3B,UACE,4BAAIH,EAAMI,OACV,qCAAaJ,EAAMK,a,kECIVC,EARK,SAACN,GACnB,OACE,oBAAIC,UAAWC,IAAQK,KAAvB,SACE,4BAAIP,EAAMI,U,iBCQDI,EAVM,SAACR,GACpB,OACE,oBAAIC,UAAWC,IAAQO,SAAvB,SACGT,EAAMS,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BP,KAAMO,EAAQP,MAA1BO,EAAQC,U,iBCqDnBC,EArDQ,SAACb,GACtB,IAAMc,EAAiBC,mBACvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MACrBC,EAAmBrB,EAAnBqB,eAERC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAACA,EAAgBF,EAAQC,IAE5B,IAAMG,EAAoB,SAACC,GACzBA,EAAMC,iBAKN,IAAMC,EAAcZ,EAAea,QAAQC,MAE3CC,QAAQC,IAAI9B,EAAM+B,SAElBb,EAAY,CAAEc,YAAa,CAAE5B,KAAMsB,GAAeK,QAAS/B,EAAM+B,WAGnE,MAAe,YAAXZ,EAEA,qBAAKlB,UAAU,WAAf,SACE,cAACgC,EAAA,EAAD,MAKFb,EAEA,qBAAKnB,UAAU,WAAf,SACE,4BAAImB,MAMR,uBAAMnB,UAAWC,IAAQgC,KAAMC,SAAUZ,EAAzC,UACE,sBAAKtB,UAAWC,IAAQkC,QAASD,SAAUZ,EAA3C,UACE,uBAAOc,QAAQ,UAAf,0BACA,0BAAUzB,GAAG,UAAU0B,KAAK,IAAIC,IAAKzB,OAEvC,qBAAKb,UAAWC,IAAQsC,QAAxB,SACE,wBAAQvC,UAAU,MAAlB,+BC6BOwC,EAzEE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACMC,EAASC,cACf,EAKI9B,YAAQ+B,KAJV7B,EADF,EACEA,YACAC,EAFF,EAEEA,OACM6B,EAHR,EAGEC,KACA7B,EAJF,EAIEA,MAGMW,EAAYc,EAAZd,QAERT,qBAAU,WACRJ,EAAYa,KACX,CAACb,EAAaa,IAEjB,IAQItB,EAJEyC,EAAeC,uBAAY,WAC/BjC,EAAYa,KACX,IAmCH,MA/Be,YAAXZ,IACFV,EACE,qBAAKR,UAAU,WAAf,SACE,cAACgC,EAAA,EAAD,OAKFb,IACFX,EACE,qBAAKR,UAAU,WAAf,SACE,4BAAImB,OAMG,cAAXD,GACE6B,GAA4C,IAA1BA,EAAeI,SAEnC3C,EACE,qBAAKR,UAAU,WAAf,SACE,yDAKS,cAAXkB,GAA0B6B,EAAeI,OAAS,IACpD3C,EAAW,cAAC,EAAD,CAAcA,SAAUuC,KAInC,0BAAS/C,UAAWC,IAAQO,SAA5B,UACE,gDACEkC,GACA,wBAAQ1C,UAAU,MAAMoD,QA7CC,WAC7BT,GAAmB,IA4Cf,2BAIDD,GACC,cAAC,EAAD,CAAgBZ,QAASA,EAASV,eAAgB6B,IAEnDzC,MCbQ6C,UAxDK,WAClB,IAAMC,EAAQC,cACRX,EAASC,cAEf,EAKI9B,YAAQyC,KAAgB,GAJ1BvC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMuC,EAHR,EAGET,KACA7B,EAJF,EAIEA,MAGMW,EAAYc,EAAZd,QAMR,OAJAT,qBAAU,WACRJ,EAAYa,KACX,CAACb,IAEW,YAAXC,EAEA,qBAAKlB,UAAU,WAAf,SACE,cAACgC,EAAA,EAAD,MAKFb,EAEA,8BACE,4BAAIA,MAKLsC,EAAYtD,MAIjByB,QAAQC,IAAIyB,GAGV,eAAC,WAAD,WACE,cAAC,EAAD,CAAkBnD,KAAMsD,EAAYtD,KAAMC,OAAQqD,EAAYrD,SAC9D,cAAC,IAAD,CAAOsD,KAAMJ,EAAMI,KAAMC,OAAK,EAA9B,SACE,qBAAK3D,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAY4D,GAAE,UAAKN,EAAMO,IAAX,aAA9B,+BAKJ,cAAC,IAAD,CAAOH,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SACE,cAAC,EAAD,UAhBG","file":"static/js/4.849b81e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1uzOZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1i7ID\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__Z4O2S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1tV5j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__23sAm\",\"loading\":\"NewCommentForm_loading__6sxCP\",\"control\":\"NewCommentForm_control__ce_wz\",\"actions\":\"NewCommentForm_actions__2-T8k\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedHandler } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedHandler();\n    }\n  }, [onAddedHandler, status, error]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    const commentText = commentTextRef.current.value;\n\n    console.log(props.quoteId);\n\n    sendRequest({ commentData: { text: commentText }, quoteId: props.quoteId });\n  };\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"centered\">\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./Comments.module.css\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n    error\n  } = useHttp(getAllComments);\n\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, []);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    comments = (\n      <div className=\"centered\">\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = (\n      <div className=\"centered\">\n        <p>No comment found yet.</p>\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={quoteId} onAddedHandler={addedHandler} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div>\r\n        <p>{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  console.log(match);\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}